// Generated by view binder compiler. Do not edit!
package com.github.anant0070.kmm_network_request.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.anant0070.kmm_network_request.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout mainView;

  @NonNull
  public final Button nextPage;

  @NonNull
  public final TextView pageNo;

  @NonNull
  public final LinearLayout prevNextButtons;

  @NonNull
  public final Button prevPage;

  @NonNull
  public final ProgressBar progressBarPopular;

  @NonNull
  public final RecyclerView recyclerViewPopularMovies;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout mainView, @NonNull Button nextPage, @NonNull TextView pageNo,
      @NonNull LinearLayout prevNextButtons, @NonNull Button prevPage,
      @NonNull ProgressBar progressBarPopular, @NonNull RecyclerView recyclerViewPopularMovies) {
    this.rootView = rootView;
    this.mainView = mainView;
    this.nextPage = nextPage;
    this.pageNo = pageNo;
    this.prevNextButtons = prevNextButtons;
    this.prevPage = prevPage;
    this.progressBarPopular = progressBarPopular;
    this.recyclerViewPopularMovies = recyclerViewPopularMovies;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout mainView = (ConstraintLayout) rootView;

      id = R.id.next_page;
      Button nextPage = ViewBindings.findChildViewById(rootView, id);
      if (nextPage == null) {
        break missingId;
      }

      id = R.id.pageNo;
      TextView pageNo = ViewBindings.findChildViewById(rootView, id);
      if (pageNo == null) {
        break missingId;
      }

      id = R.id.prev_next_buttons;
      LinearLayout prevNextButtons = ViewBindings.findChildViewById(rootView, id);
      if (prevNextButtons == null) {
        break missingId;
      }

      id = R.id.prev_page;
      Button prevPage = ViewBindings.findChildViewById(rootView, id);
      if (prevPage == null) {
        break missingId;
      }

      id = R.id.progress_bar_popular;
      ProgressBar progressBarPopular = ViewBindings.findChildViewById(rootView, id);
      if (progressBarPopular == null) {
        break missingId;
      }

      id = R.id.recycler_view_popular_movies;
      RecyclerView recyclerViewPopularMovies = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPopularMovies == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, mainView, nextPage, pageNo,
          prevNextButtons, prevPage, progressBarPopular, recyclerViewPopularMovies);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
